"""
Django settings for NewsPortal project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os

from pathlib import Path
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vlj7e#ksmj5v$$67l_9ufyfkhzr+&%8k2u%-hi(rm8^l%#vx=9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',  # Приложение поддержки авторизации
    'django.contrib.contenttypes',
    'django.contrib.sessions',  # Управление сессиями. В обработке каждого запроса (переменная request) вы можете
    # получить доступ к данным сессии (которые хранятся на сервере) и каким-то образом манипулировать ими.
    'django.contrib.messages',
    'django.contrib.staticfiles',  # Приложение для работы с "статическими файлами"(CSS, Java и т.д)

    # Список пользовательских приложений, создается разработчиком
    'django.contrib.sites',
    'django.contrib.flatpages',
    'newsapp.apps.NewsappConfig',  # newsapp - основное приложение новостного портала
    'django_filters',  # Приложение для подключения фильтров
    # Подключение приложений из "allauth"
    'allauth',  # Обязательное приложение allauth
    'allauth.account',  # Обязательное приложение allauth
    'allauth.socialaccount',  # Обязательное приложение allauth
    'allauth.socialaccount.providers.yandex',  # Необходимо для реализации регистрации через провайдер "Yandex"

    'django_apscheduler',  # Приложение, которое добавляет облегченную оболочку вокруг APScheduler. Это
    # позволяет хранить постоянные задания в базе данных с помощью ORM Django. django-apscheduler — планирование
    # по фиксированному графику выполнения.
]

SITE_ID = 1  # Идентификатор (целое число) текущего сайта в таблице базы данных django_site. Может использоваться
# приложениями для связывания своих данных с определенными сайтами и, таким образом, для управления контентом
# нескольких сайтов в единой базе данных.

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    'django.middleware.locale.LocaleMiddleware',  # Локализация

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'

    # ____________________________________________________________________
    #  Кэш сайта целиком
    # 'django.middleware.cache.UpdateCacheMiddleware',
    # 'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    # ____________________________________________________________________
]

ROOT_URLCONF = 'NewsPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Задаем путь к папке с шаблонами, где Django будет их искать
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # `allauth` обязательно нужен этот процессор
                'django.template.context_processors.request',  # контекстный процессор, нужен для allauth.
            ],
        },
    },
]

# Добавляем бэкенды аутентификации:
AUTHENTICATION_BACKENDS = [
    # Необходимо войти в систему под именем пользователя в админке Django, независимо от `allauth`:
    'django.contrib.auth.backends.ModelBackend',  # Встроенный бэкенд Django, реализующий аутентификацию по username

    # Специальные методы аутентификации `allauth`, такие, как вход по электронной почте:
    'allauth.account.auth_backends.AuthenticationBackend',  # Бэкенд аутентификации, предоставленный пакетом allauth:
    # нам нужно «включить» аутентификацию как по username, так и специфичную по email или сервис-провайдеру.
]

WSGI_APPLICATION = 'NewsPortal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

SITE_URL = 'http://127.0.0.1:8000'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настройка STATICFILES_DIRS указывает каталоги, которые проверяются на наличие статических файлов.
STATICFILES_DIRS = [
    BASE_DIR / "static"
]

# Создание таблицы для кэширования
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),  # Указываем, куда будем сохранять кэшируемые файлы! Не
        # забываем создать папку cache_files внутри папки с manage.py!
        'TIMEOUT': 30,  # время, которое будет храниться кэш
    }
}

# LOGIN_URL = '/error_create/'
LOGIN_REDIRECT_URL = '/post'  # страница, на которую перенаправляется пользователь после успешного входа на сайт,

ACCOUNT_EMAIL_REQUIRED = True  # Регистрация по электронной почте обязательно
ACCOUNT_UNIQUE_EMAIL = True  # Регистрация по уникальной электронной почте
ACCOUNT_USERNAME_REQUIRED = False  # Регистрация по username не обязательна
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Аутентификация будет происходить посредством электронной почты
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Не пускать пользователя на сайт до момента подтверждения почты;
# optional — сообщение о подтверждении почты будет отправлено, но пользователь может
# залогиниться на сайте без подтверждения почты;
# 'none' Верификация электронной почты отсутствует
# ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # Позволит избежать дополнительного входа и активирует аккаунт сразу, как только
# # мы перейдём по ссылке
# ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3  # Хранит количество дней, когда доступна ссылка на подтверждение
# # регистрации.
ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}  # Чтобы allauth распознал нашу форму как ту,
# что должна выполняться вместо формы по умолчанию

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')

EMAIL_SUBJECT_PREFIX = 'Hello!'
SERVER_EMAIL = os.environ.get('SERVER_EMAIL')
# MANAGERS = os.environ.get('MANAGERS')

ADMINS = (
    ('admin', 'a.newsportal@yandex.ru'),
)

# APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"  # Формат даты, которую будет воспринимать наш задачник
# APSCHEDULER_RUN_NOW_TIMEOUT = 25  # За 25 секунд задача автоматически снимается, большее время влияет на
# # производительность сервера

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

#_______________________________________________________________________________________________________________________
# Стандартная конфигурация логирования в Django заключается в следующем:
#
# Если DEBUG = True, Django отправляет все сообщения уровня INFO и выше в консоль.
# Также при DEBUG = True, все сообщения уровней ERROR и CRITICAL отправляет разработчику через веб-интерфейс.
# При DEBUG = False, сообщения уровня ERROR и CRITICAL отправляются в AdminEmailHandler, т. е. в обработчик,
# отправляющий данные сообщения по e-mail администратору.
#_______________________________________________________________________________________________________________________
#
# Переменная логирования представляет собой словарь словарей — такой формат общепринят во многих настройках конфигурации

LOGGING = {
    'version': 1,  # Ключ version, на текущий момент единственно допустимое значение - 1
    # Включение и выключение Django DEBUG (рекомендуется оставлять False)
    'disable_existing_loggers': False,  # Контролирует работу существующей (стандартной) схемы логирования Django
    # Логирование
    'loggers': {
        'django': {  # Логгер верхнего уровня, который принимает все сообщения, но непосредственно в него ничего не
            # записывается. Все сообщения, поступающие в него распределяются по дочерним логгерам. Регистратор Django
            # отправляет все сообщения в консоль
            'handlers': ['console',
                         'console_warning',
                         'console_error',
                         'file_general'],  # Обработчики
            'level': 'DEBUG',
            'propagate': True,  # Этим параметром регулируется возможность передачи сообщения другим логгерам. Если
            # оно установлено в False, то дальше сообщение не пойдет
        },
        'django.request': {  # Логгер, принимающий все сообщения, связанные с ошибками обработки запроса. Сообщения
            # этого регистратора содержат в виде дополнительной информации код ошибки, а также сам запрос,
            # который вызвал появление этого сообщения
            'handlers': ['file_errors', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {  # Логгер, регистрирующий сообщения, возникающие на этапе вызова команды runserver. Иными
            # словами, при попытке запуска приложения
            'handlers': ['file_errors', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {  # Логгер, взаимодействующий с системой шаблонов Django
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db_backends': {  # Сообщения, попадающие в этот логгер, относятся к взаимодействию приложения с базой
            # данных. Ошибки в моделях, взаимодействии с ними, миграциях и т. д
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {  # Определяет класс логгеров, регистрирующих события нарушения безопасности
            'handlers': ['file_security'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    # Обработка
    'handlers': {
        'console': {  # Пункт 1, вывод сообщений в консоль уровня DEBUG и выше
            'level': 'DEBUG',  # Уровень логирования
            'filters': ['require_debug_true'],  # Фильтр DEBUG = True
            'class': 'logging.StreamHandler',  # Вывод сообщений в консоль
            'formatter': 'simple',  # Форматирование
        },
        'console_warning': {  # Пункт 1, вывод сообщений в консоль уровня WARNING и выше
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'warning_console',
        },
        'console_error': {  # Пункт 1, вывод сообщений в консоль уровня ERROR и выше
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'error_file',
        },
        'file_general': {  # Пункт 2, вывод сообщений в файл general.log
            'level': 'INFO',
            'filters': ['require_debug_false'],  # Фильтр DEBUG = False
            'class': 'logging.FileHandler',  # Вывод сообщений в файл
            'filename': f'{BASE_DIR}/logs/general.log',  # Название файла
            'formatter': 'general_file',
        },
        'file_errors': {  # Пункт 3, вывод сообщений в файл errors.log
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': f'{BASE_DIR}/logs/errors.log',
            'formatter': 'error_file',
        },
        'file_security': {  # Пункт 4, вывод сообщений в файл security.log
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': f'{BASE_DIR}/logs/security.log',
            'formatter': 'security_file',
        },
        'mail_admins': {  # Пункт 5, отправка на почту сообщений уровня ERROR
            'level': 'ERROR',
            'filters': ['require_debug_false'],  # Отправка только при debug_false
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'error_mail',
        },
    },
    # Форматирование (форматтерсы можно уменьшить до 4, но решил сделать ровно по пунктам с модуля;))
    'formatters': {  # Простой формат записи сообщений: логирование сообщения и само сообщение.
        # Вывод сообщений уровня DEBUG
        'simple': {
            # Выводятся все сообщения уровня DEBUG и выше, включающие время, уровень сообщения, сообщения
            'format': '%(asctime)s %(levelname)s %(message)s',  # Пункт 1, часть про DEBUG
        },
        # Вывод сообщений уровня WARNING
        'warning_console': {  # Пункт 1, часть про WARNING
            # Дополнительно выводится путь к источнику события
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s',
        },
        # Вывод сообщений уровня INFO
        'general_file': {  # Пункт 2 про INFO
            # Дополнительно выводится аргумент модуля в котором возникло сообщение
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
        },
        # Вывод сообщений уровня ERROR и CRITICAL
        'error_file': {  # Пункты 1 и 3 про ERROR и CRITICAL со стэком
            # Дополнительно выводится стэк ошибок (exc_info)
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s',
        },
        # Вывод сообщений уровня django.security
        'security_file': {  # Пункт 4 про django.security
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
        },
        # Вывод сообщений уровня ERROR на почту без стэка
        'error_mail': {  # Пункт 5 про ERROR без стэка
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s',
        },
    },
    # Определяем фильтр, который пропускает записи только в случае, когда DEBUG = True или False
    # Фильтрация
    'filters': {
        'require_debug_true': {  # Фильтр пропускает сообщения, если DEBUG включен
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {  # Фильтр пропускает сообщения, если DEBUG выключен
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
}

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'loggers': {
#         'django': {
#             'handlers': ['post'],
#             'level': 'DEBUG',
#         },
#     },
#     'handlers': {
#         'post': {
#             'level': 'INFO',
#             "filters": ["require_debug_true"],
#             'class': 'logging.FileHandler',
#             'filename': 'debug.log',
#             'formatter': 'myformatter',
#         },
#     },
#     'formatters': {
#         'myformatter': {
#             'format': '%(asctime)s %(levelname)s %(message)s',
#             # 'datetime': '%Y.%m.%d %H.%M.S',
#             # 'style': '{',
#         },
#     },
#     "filters": {
#         "require_debug_false": {
#             "()": "django.utils.log.RequireDebugFalse",
#         },
#         "require_debug_true": {
#             "()": "django.utils.log.RequireDebugTrue",
#         },
#     },
# }


